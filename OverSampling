>>>>>>> Round = 1
[INFO] START oversamping
[INFO] FINISH oversamping, add 2531 more positive samples
# Tuning hyper-parameters for f1
()
Fitting 3 folds for each of 45 candidates, totalling 135 fits
[Parallel(n_jobs=6)]: Done  26 tasks      | elapsed:  6.0min
[Parallel(n_jobs=6)]: Done 135 out of 135 | elapsed: 29.2min finished
Best parameters set found on development set of optimizing f1:
()
{'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
()
Grid scores on development set of optimizing f1:
()
0.855 (+/-0.016) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.902 (+/-0.012) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.935 (+/-0.011) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.944 (+/-0.006) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 1}}
0.931 (+/-0.010) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 1}}
0.920 (+/-0.021) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.950 (+/-0.006) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.959 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.955 (+/-0.006) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 8}}
0.936 (+/-0.007) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 8}}
0.908 (+/-0.009) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.934 (+/-0.006) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.950 (+/-0.008) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.954 (+/-0.006) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': 'balanced'}
0.935 (+/-0.007) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': 'balanced'}
0.903 (+/-0.010) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.934 (+/-0.009) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.954 (+/-0.010) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.954 (+/-0.004) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 1}}
0.936 (+/-0.005) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 1}}
0.949 (+/-0.005) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.956 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.961 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.954 (+/-0.004) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 8}}
0.936 (+/-0.005) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 8}}
0.934 (+/-0.009) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.949 (+/-0.004) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.959 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.954 (+/-0.003) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': 'balanced'}
0.936 (+/-0.007) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': 'balanced'}
0.933 (+/-0.006) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.951 (+/-0.006) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.962 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.955 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 1}}
0.936 (+/-0.005) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 1}}
0.955 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.957 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.963 (+/-0.000) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.955 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 8}}
0.936 (+/-0.005) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 8}}
0.949 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.956 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.962 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.954 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': 'balanced'}
0.936 (+/-0.005) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': 'balanced'}
()
Detailed classification report of optimizing f1:
()
The model is trained on the full development set.
The scores are computed on the full evaluation set.
()
             precision    recall  f1-score   support

          0       0.96      0.98      0.97      2170
          1       0.87      0.71      0.78       332

avg / total       0.94      0.95      0.94      2502

()
[[2134   36]
 [  97  235]]
>>>>>>> Round = 2
[INFO] START oversamping
[INFO] FINISH oversamping, add 2499 more positive samples
# Tuning hyper-parameters for f1
()
Fitting 3 folds for each of 45 candidates, totalling 135 fits
[Parallel(n_jobs=6)]: Done  26 tasks      | elapsed:  5.9min
[Parallel(n_jobs=6)]: Done 135 out of 135 | elapsed: 30.2min finished
Best parameters set found on development set of optimizing f1:
()
{'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
()
Grid scores on development set of optimizing f1:
()
0.855 (+/-0.017) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.911 (+/-0.023) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.939 (+/-0.019) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.944 (+/-0.010) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 1}}
0.938 (+/-0.009) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 1}}
0.936 (+/-0.010) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.958 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.962 (+/-0.005) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.954 (+/-0.007) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 8}}
0.943 (+/-0.010) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 8}}
0.919 (+/-0.022) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.940 (+/-0.018) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.957 (+/-0.009) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.952 (+/-0.007) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': 'balanced'}
0.942 (+/-0.009) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': 'balanced'}
0.915 (+/-0.026) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.941 (+/-0.017) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.957 (+/-0.005) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.953 (+/-0.006) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 1}}
0.942 (+/-0.008) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 1}}
0.957 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.964 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.964 (+/-0.003) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.955 (+/-0.006) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 8}}
0.942 (+/-0.009) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 8}}
0.940 (+/-0.018) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.955 (+/-0.010) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.962 (+/-0.004) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.954 (+/-0.005) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': 'balanced'}
0.942 (+/-0.009) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': 'balanced'}
0.940 (+/-0.018) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.957 (+/-0.005) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.963 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.954 (+/-0.005) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 1}}
0.942 (+/-0.009) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 1}}
0.962 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.965 (+/-0.000) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.964 (+/-0.005) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.955 (+/-0.006) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 8}}
0.942 (+/-0.009) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 8}}
0.954 (+/-0.006) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.962 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.964 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.955 (+/-0.005) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': 'balanced'}
0.942 (+/-0.009) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': 'balanced'}
()
Detailed classification report of optimizing f1:
()
The model is trained on the full development set.
The scores are computed on the full evaluation set.
()
             precision    recall  f1-score   support

          0       0.96      0.98      0.97      2218
          1       0.80      0.68      0.73       284

avg / total       0.94      0.94      0.94      2502

()
[[2170   48]
 [  92  192]]
>>>>>>> Round = 3
[INFO] START oversamping
[INFO] FINISH oversamping, add 2508 more positive samples
# Tuning hyper-parameters for f1
()
Fitting 3 folds for each of 45 candidates, totalling 135 fits
[Parallel(n_jobs=6)]: Done  26 tasks      | elapsed:  5.9min
[Parallel(n_jobs=6)]: Done 135 out of 135 | elapsed: 29.1min finished
Best parameters set found on development set of optimizing f1:
()
{'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
()
Grid scores on development set of optimizing f1:
()
0.850 (+/-0.008) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.899 (+/-0.016) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.926 (+/-0.018) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.937 (+/-0.012) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 1}}
0.925 (+/-0.008) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 1}}
0.922 (+/-0.005) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.949 (+/-0.009) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.955 (+/-0.010) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.945 (+/-0.012) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 8}}
0.928 (+/-0.009) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 8}}
0.906 (+/-0.021) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.930 (+/-0.017) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.950 (+/-0.010) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.945 (+/-0.013) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': 'balanced'}
0.928 (+/-0.009) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': 'balanced'}
0.901 (+/-0.019) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.931 (+/-0.019) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.948 (+/-0.008) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.944 (+/-0.010) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 1}}
0.928 (+/-0.010) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 1}}
0.948 (+/-0.005) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.953 (+/-0.013) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.954 (+/-0.011) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.945 (+/-0.010) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 8}}
0.928 (+/-0.009) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 8}}
0.932 (+/-0.016) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.947 (+/-0.012) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.955 (+/-0.010) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.944 (+/-0.011) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': 'balanced'}
0.928 (+/-0.010) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': 'balanced'}
0.931 (+/-0.016) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.947 (+/-0.011) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.952 (+/-0.009) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.945 (+/-0.010) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 1}}
0.928 (+/-0.009) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 1}}
0.953 (+/-0.012) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.952 (+/-0.009) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.953 (+/-0.009) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.945 (+/-0.010) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 8}}
0.928 (+/-0.009) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 8}}
0.947 (+/-0.010) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.952 (+/-0.011) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.954 (+/-0.009) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.945 (+/-0.010) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': 'balanced'}
0.928 (+/-0.009) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': 'balanced'}
()
Detailed classification report of optimizing f1:
()
The model is trained on the full development set.
The scores are computed on the full evaluation set.
()
             precision    recall  f1-score   support

          0       0.96      0.98      0.97      2204
          1       0.81      0.70      0.75       297

avg / total       0.94      0.95      0.94      2501

()
[[2156   48]
 [  89  208]]
>>>>>>> Round = 4
[INFO] START oversamping
[INFO] FINISH oversamping, add 2508 more positive samples
# Tuning hyper-parameters for f1
()
Fitting 3 folds for each of 45 candidates, totalling 135 fits
[Parallel(n_jobs=6)]: Done  26 tasks      | elapsed:  5.9min
[Parallel(n_jobs=6)]: Done 135 out of 135 | elapsed: 27.5min finished
Best parameters set found on development set of optimizing f1:
()
{'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
()
Grid scores on development set of optimizing f1:
()
0.843 (+/-0.021) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.896 (+/-0.031) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.927 (+/-0.023) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.936 (+/-0.022) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 1}}
0.928 (+/-0.026) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 1}}
0.925 (+/-0.007) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.954 (+/-0.016) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.958 (+/-0.017) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.948 (+/-0.020) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 8}}
0.933 (+/-0.022) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 8}}
0.907 (+/-0.019) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.932 (+/-0.021) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.951 (+/-0.021) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.946 (+/-0.021) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': 'balanced'}
0.932 (+/-0.023) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': 'balanced'}
0.900 (+/-0.033) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.931 (+/-0.026) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.950 (+/-0.018) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.945 (+/-0.018) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 1}}
0.932 (+/-0.023) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 1}}
0.954 (+/-0.012) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.959 (+/-0.015) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.957 (+/-0.013) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.947 (+/-0.017) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 8}}
0.933 (+/-0.022) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 8}}
0.933 (+/-0.022) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.951 (+/-0.019) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.955 (+/-0.015) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.947 (+/-0.018) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': 'balanced'}
0.933 (+/-0.022) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': 'balanced'}
0.933 (+/-0.025) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.950 (+/-0.019) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.954 (+/-0.013) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.947 (+/-0.019) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 1}}
0.933 (+/-0.022) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 1}}
0.958 (+/-0.012) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.958 (+/-0.013) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.957 (+/-0.011) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.948 (+/-0.018) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 8}}
0.933 (+/-0.022) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 8}}
0.949 (+/-0.021) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.956 (+/-0.014) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.956 (+/-0.012) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.948 (+/-0.018) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': 'balanced'}
0.933 (+/-0.023) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': 'balanced'}
()
Detailed classification report of optimizing f1:
()
The model is trained on the full development set.
The scores are computed on the full evaluation set.
()
             precision    recall  f1-score   support

          0       0.97      0.98      0.97      2204
          1       0.83      0.77      0.80       297

avg / total       0.95      0.95      0.95      2501

()
[[2157   47]
 [  69  228]]
>>>>>>> Round = 5
[INFO] START oversamping
[INFO] FINISH oversamping, add 2528 more positive samples
# Tuning hyper-parameters for f1
()
Fitting 3 folds for each of 45 candidates, totalling 135 fits
[Parallel(n_jobs=6)]: Done  26 tasks      | elapsed:  5.5min
[Parallel(n_jobs=6)]: Done 135 out of 135 | elapsed: 491.0min finished
Best parameters set found on development set of optimizing f1:
()
{'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
()
Grid scores on development set of optimizing f1:
()
0.852 (+/-0.010) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.899 (+/-0.010) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.933 (+/-0.007) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.934 (+/-0.007) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 1}}
0.925 (+/-0.011) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 1}}
0.931 (+/-0.006) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.953 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.956 (+/-0.006) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.946 (+/-0.004) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 8}}
0.929 (+/-0.010) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 8}}
0.912 (+/-0.006) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.934 (+/-0.006) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.949 (+/-0.007) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.943 (+/-0.009) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': 'balanced'}
0.929 (+/-0.010) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': 'balanced'}
0.901 (+/-0.012) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.934 (+/-0.006) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.949 (+/-0.008) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.943 (+/-0.007) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 1}}
0.929 (+/-0.010) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 1}}
0.952 (+/-0.003) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.954 (+/-0.007) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.955 (+/-0.007) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.945 (+/-0.003) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 8}}
0.930 (+/-0.010) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 8}}
0.934 (+/-0.007) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.947 (+/-0.009) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.954 (+/-0.007) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.945 (+/-0.003) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': 'balanced'}
0.930 (+/-0.010) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': 'balanced'}
0.933 (+/-0.005) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.947 (+/-0.005) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.955 (+/-0.007) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.945 (+/-0.004) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 1}}
0.929 (+/-0.010) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 1}}
0.952 (+/-0.007) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.953 (+/-0.006) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.955 (+/-0.007) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.946 (+/-0.004) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 8}}
0.929 (+/-0.010) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 8}}
0.946 (+/-0.008) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.952 (+/-0.006) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.955 (+/-0.007) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.945 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': 'balanced'}
0.930 (+/-0.010) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': 'balanced'}
()
Detailed classification report of optimizing f1:
()
The model is trained on the full development set.
The scores are computed on the full evaluation set.
()
             precision    recall  f1-score   support

          0       0.96      0.98      0.97      2174
          1       0.84      0.73      0.78       327

avg / total       0.95      0.95      0.95      2501

()
[[2130   44]
 [  88  239]]