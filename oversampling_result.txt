>>>>>>> Round = 1
[INFO] START oversamping
[INFO] FINISH oversamping, add 7595 more positive samples
# Tuning hyper-parameters for f1

Fitting 3 folds for each of 45 candidates, totalling 135 fits
Best parameters set found on development set of optimizing f1:

{'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 1}}

Grid scores on development set of optimizing f1:

0.960 (+/-0.004) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.978 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.989 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.994 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 1}}
0.997 (+/-0.004) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 1}}
0.961 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.985 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.995 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 8}}
0.997 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 8}}
0.960 (+/-0.004) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.978 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.989 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.994 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': 'balanced'}
0.997 (+/-0.004) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': 'balanced'}
0.977 (+/-0.004) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.987 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.995 (+/-0.004) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 1}}
0.997 (+/-0.003) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 1}}
0.984 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.989 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.993 (+/-0.000) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.996 (+/-0.003) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 8}}
0.997 (+/-0.003) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 8}}
0.977 (+/-0.004) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.987 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.995 (+/-0.004) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': 'balanced'}
0.997 (+/-0.003) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': 'balanced'}
0.986 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.989 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.993 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.996 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 1}}
0.997 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 1}}
0.987 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.993 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.996 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 8}}
0.997 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 8}}
0.986 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.989 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.993 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.996 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': 'balanced'}
0.997 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': 'balanced'}

Detailed classification report of optimizing f1:

The model is trained on the full development set.
The scores are computed on the full evaluation set.

             precision    recall  f1-score   support

          0       0.90      0.99      0.94      2170
          1       0.88      0.24      0.38       332

avg / total       0.89      0.89      0.87      2502


[[2159   11]
 [ 252   80]]
>>>>>>> Round = 2
[INFO] START oversamping
[INFO] FINISH oversamping, add 7499 more positive samples
# Tuning hyper-parameters for f1

Fitting 3 folds for each of 45 candidates, totalling 135 fits
Best parameters set found on development set of optimizing f1:

{'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 1}}

Grid scores on development set of optimizing f1:

0.961 (+/-0.009) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.976 (+/-0.006) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.987 (+/-0.004) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.994 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 1}}
0.996 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 1}}
0.962 (+/-0.004) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.985 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.995 (+/-0.000) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 8}}
0.997 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 8}}
0.961 (+/-0.009) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.976 (+/-0.006) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.987 (+/-0.004) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.994 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': 'balanced'}
0.996 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': 'balanced'}
0.974 (+/-0.006) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.985 (+/-0.005) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.992 (+/-0.004) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.995 (+/-0.000) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 1}}
0.997 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 1}}
0.984 (+/-0.003) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.990 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.993 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.996 (+/-0.000) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 8}}
0.997 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 8}}
0.974 (+/-0.006) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.985 (+/-0.005) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.992 (+/-0.004) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.995 (+/-0.000) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': 'balanced'}
0.997 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': 'balanced'}
0.985 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.989 (+/-0.004) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.993 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.996 (+/-0.000) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 1}}
0.997 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 1}}
0.988 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.993 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.996 (+/-0.000) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 8}}
0.997 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 8}}
0.985 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.989 (+/-0.004) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.993 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.996 (+/-0.000) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': 'balanced'}
0.997 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': 'balanced'}

Detailed classification report of optimizing f1:

The model is trained on the full development set.
The scores are computed on the full evaluation set.

             precision    recall  f1-score   support

          0       0.91      0.99      0.95      2218
          1       0.80      0.20      0.32       284

avg / total       0.89      0.90      0.88      2502


[[2204   14]
 [ 228   56]]
>>>>>>> Round = 3
[INFO] START oversamping
[INFO] FINISH oversamping, add 7526 more positive samples
# Tuning hyper-parameters for f1

Fitting 3 folds for each of 45 candidates, totalling 135 fits
Best parameters set found on development set of optimizing f1:

{'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 1}}

Grid scores on development set of optimizing f1:

0.956 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.977 (+/-0.004) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.987 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.993 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 1}}
0.994 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 1}}
0.957 (+/-0.004) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.983 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.989 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.994 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 8}}
0.994 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 8}}
0.956 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.977 (+/-0.004) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.987 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.993 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': 'balanced'}
0.994 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': 'balanced'}
0.976 (+/-0.003) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.985 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.994 (+/-0.003) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 1}}
0.994 (+/-0.003) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 1}}
0.982 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.987 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.994 (+/-0.003) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 8}}
0.994 (+/-0.003) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 8}}
0.976 (+/-0.003) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.985 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.994 (+/-0.003) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': 'balanced'}
0.994 (+/-0.003) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': 'balanced'}
0.984 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.988 (+/-0.000) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.994 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 1}}
0.994 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 1}}
0.986 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.988 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.994 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 8}}
0.994 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 8}}
0.984 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.988 (+/-0.000) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.994 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': 'balanced'}
0.994 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': 'balanced'}

Detailed classification report of optimizing f1:

The model is trained on the full development set.
The scores are computed on the full evaluation set.

             precision    recall  f1-score   support

          0       0.95      0.99      0.97      2204
          1       0.88      0.62      0.73       297

avg / total       0.94      0.94      0.94      2501


[[2178   26]
 [ 112  185]]
>>>>>>> Round = 4
[INFO] START oversamping
[INFO] FINISH oversamping, add 7526 more positive samples
# Tuning hyper-parameters for f1

Fitting 3 folds for each of 45 candidates, totalling 135 fits
Best parameters set found on development set of optimizing f1:

{'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 8}}

Grid scores on development set of optimizing f1:

0.957 (+/-0.005) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.977 (+/-0.006) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.987 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.994 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 1}}
0.995 (+/-0.004) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 1}}
0.957 (+/-0.008) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.984 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.995 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 8}}
0.995 (+/-0.004) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 8}}
0.957 (+/-0.005) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.977 (+/-0.006) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.987 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.994 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': 'balanced'}
0.995 (+/-0.004) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': 'balanced'}
0.976 (+/-0.007) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.986 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.995 (+/-0.003) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 1}}
0.995 (+/-0.004) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 1}}
0.984 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.988 (+/-0.000) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.000) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.995 (+/-0.003) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 8}}
0.995 (+/-0.004) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 8}}
0.976 (+/-0.007) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.986 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.995 (+/-0.003) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': 'balanced'}
0.995 (+/-0.004) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': 'balanced'}
0.985 (+/-0.004) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.989 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.995 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.015625, 'class_weight': {1: 1}}
0.995 (+/-0.004) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.03125, 'class_weight': {1: 1}}
0.987 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.990 (+/-0.000) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992