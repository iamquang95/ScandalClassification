>>>>>>> Round = 1
[INFO] START SMOTE algo with rate = 10 for 1205 samples
[INFO] DONE SMOTE algo, generate more 12050
# Tuning hyper-parameters for f1
()
Fitting 3 folds for each of 60 candidates, totalling 180 fits
Best parameters set found on development set of optimizing f1:
()
{'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
()
Grid scores on development set of optimizing f1:
()
0.983 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.985 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.987 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.986 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.988 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.990 (+/-0.000) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.981 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.990 (+/-0.000) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.991 (+/-0.000) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.981 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.984 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.985 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.986 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.988 (+/-0.000) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.988 (+/-0.000) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.990 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.991 (+/-0.000) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.989 (+/-0.000) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.991 (+/-0.000) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.985 (+/-0.000) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.987 (+/-0.000) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.990 (+/-0.000) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.988 (+/-0.000) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.992 (+/-0.000) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.990 (+/-0.000) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.990 (+/-0.000) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.988 (+/-0.000) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.989 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
()
Detailed classification report of optimizing f1:
()
The model is trained on the full development set.
The scores are computed on the full evaluation set.
()
             precision    recall  f1-score   support

          0       0.96      0.98      0.97      2170
          1       0.83      0.75      0.79       332

avg / total       0.95      0.95      0.95      2502

()
[[2120   50]
 [  82  250]]
>>>>>>> Round = 2
[INFO] START SMOTE algo with rate = 10 for 1253 samples
[INFO] DONE SMOTE algo, generate more 12530
# Tuning hyper-parameters for f1
()
Fitting 3 folds for each of 60 candidates, totalling 180 fits
Best parameters set found on development set of optimizing f1:
()
{'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
()
Grid scores on development set of optimizing f1:
()
0.984 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.986 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.987 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.987 (+/-0.004) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.989 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.982 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.982 (+/-0.004) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.985 (+/-0.004) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.986 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.987 (+/-0.004) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.989 (+/-0.003) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.989 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.990 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.003) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.986 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.988 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.989 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.990 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.992 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.993 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.993 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.988 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.990 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.992 (+/-0.003) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.993 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.992 (+/-0.003) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.993 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.993 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.990 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.993 (+/-0.003) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.993 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.992 (+/-0.003) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.992 (+/-0.003) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.993 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.992 (+/-0.003) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.993 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.992 (+/-0.003) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.993 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
()
Detailed classification report of optimizing f1:
()
The model is trained on the full development set.
The scores are computed on the full evaluation set.
()
             precision    recall  f1-score   support

          0       0.96      0.97      0.97      2218
          1       0.75      0.72      0.73       284

avg / total       0.94      0.94      0.94      2502

()
[[2149   69]
 [  79  205]]
>>>>>>> Round = 3
[INFO] START SMOTE algo with rate = 10 for 1240 samples
[INFO] DONE SMOTE algo, generate more 12400
# Tuning hyper-parameters for f1
()
Fitting 3 folds for each of 60 candidates, totalling 180 fits
Best parameters set found on development set of optimizing f1:
()
{'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
()
Grid scores on development set of optimizing f1:
()
0.983 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.985 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.986 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.987 (+/-0.000) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.989 (+/-0.000) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.981 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.990 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.981 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.984 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.985 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.986 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.989 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.989 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.991 (+/-0.000) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.984 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.987 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.988 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.991 (+/-0.000) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.987 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.989 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.991 (+/-0.000) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.989 (+/-0.000) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.992 (+/-0.000) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.992 (+/-0.000) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
()
Detailed classification report of optimizing f1:
()
The model is trained on the full development set.
The scores are computed on the full evaluation set.
()
             precision    recall  f1-score   support

          0       0.97      0.98      0.97      2204
          1       0.81      0.74      0.77       297

avg / total       0.95      0.95      0.95      2501

()
[[2152   52]
 [  78  219]]
>>>>>>> Round = 4
[INFO] START SMOTE algo with rate = 10 for 1240 samples
[INFO] DONE SMOTE algo, generate more 12400
# Tuning hyper-parameters for f1
()
Fitting 3 folds for each of 60 candidates, totalling 180 fits
Best parameters set found on development set of optimizing f1:
()
{'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
()
Grid scores on development set of optimizing f1:
()
0.983 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.985 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.986 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.987 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.988 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.990 (+/-0.000) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.980 (+/-0.006) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.989 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.981 (+/-0.000) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.983 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.985 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.986 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.988 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.988 (+/-0.000) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.991 (+/-0.000) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.989 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.991 (+/-0.000) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.984 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.987 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.990 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.988 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.990 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.989 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.992 (+/-0.000) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.987 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.990 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.990 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.989 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.990 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.990 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.990 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
()
Detailed classification report of optimizing f1:
()
The model is trained on the full development set.
The scores are computed on the full evaluation set.
()
             precision    recall  f1-score   support

          0       0.97      0.97      0.97      2204
          1       0.80      0.80      0.80       297

avg / total       0.95      0.95      0.95      2501

()
[[2146   58]
 [  58  239]]
>>>>>>> Round = 5
[INFO] START SMOTE algo with rate = 10 for 1210 samples
[INFO] DONE SMOTE algo, generate more 12100
# Tuning hyper-parameters for f1
()
Fitting 3 folds for each of 60 candidates, totalling 180 fits
Best parameters set found on development set of optimizing f1:
()
{'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
()
Grid scores on development set of optimizing f1:
()
0.983 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.984 (+/-0.004) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.986 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.985 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.987 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.990 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.984 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.989 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.990 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.981 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.983 (+/-0.004) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.984 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.985 (+/-0.004) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.987 (+/-0.004) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.990 (+/-0.003) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.987 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.989 (+/-0.003) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.990 (+/-0.003) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.989 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.990 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.984 (+/-0.003) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.987 (+/-0.004) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.989 (+/-0.003) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.987 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.989 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.988 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.990 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.989 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.990 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.987 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.989 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.990 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.989 (+/-0.003) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.990 (+/-0.003) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.990 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.990 (+/-0.003) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.990 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.988 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.990 (+/-0.003) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.990 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.990 (+/-0.003) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.990 (+/-0.003) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.989 (+/-0.003) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.990 (+/-0.003) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
()
Detailed classification report of optimizing f1:
()
The model is trained on the full development set.
The scores are computed on the full evaluation set.
()
             precision    recall  f1-score   support

          0       0.96      0.97      0.97      2174
          1       0.79      0.75      0.77       327

avg / total       0.94      0.94      0.94      2501

()
[[2111   63]
 [  83  244]]
