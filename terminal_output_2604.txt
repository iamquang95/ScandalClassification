>>>>>>> Round = 1
[INFO] START SMOTE algo with rate = 10 for 1221 samples
[INFO] DONE SMOTE algo, generate more 12210
# Tuning hyper-parameters for f1
()
Fitting 3 folds for each of 60 candidates, totalling 180 fits
Best parameters set found on development set of optimizing f1:
()
{'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
()
Grid scores on development set of optimizing f1:
()
0.985 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.987 (+/-0.000) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.989 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.988 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.990 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.991 (+/-0.000) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.982 (+/-0.005) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.990 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.983 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.985 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.988 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.987 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.989 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.989 (+/-0.003) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.986 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.989 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.989 (+/-0.000) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.989 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.992 (+/-0.000) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.993 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.993 (+/-0.000) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.993 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.993 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.993 (+/-0.000) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.993 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.993 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.993 (+/-0.000) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
()
Detailed classification report of optimizing f1:
()
The model is trained on the full development set.
The scores are computed on the full evaluation set.
()
             precision    recall  f1-score   support

          0       0.96      0.97      0.97      2186
          1       0.78      0.72      0.75       316

avg / total       0.94      0.94      0.94      2502

()
[[2123   63]
 [  87  229]]
>>>>>>> Round = 2
[INFO] START SMOTE algo with rate = 10 for 1262 samples
[INFO] DONE SMOTE algo, generate more 12620
# Tuning hyper-parameters for f1
()
Fitting 3 folds for each of 60 candidates, totalling 180 fits
Best parameters set found on development set of optimizing f1:
()
{'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
()
Grid scores on development set of optimizing f1:
()
0.984 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.987 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.988 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.986 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.989 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.990 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.979 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.990 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.982 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.985 (+/-0.000) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.987 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.987 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.989 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.989 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.990 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.989 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.986 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.988 (+/-0.000) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.990 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.989 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.989 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.990 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.988 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.990 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.990 (+/-0.003) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.991 (+/-0.004) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.989 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.990 (+/-0.003) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.990 (+/-0.003) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.990 (+/-0.003) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
()
Detailed classification report of optimizing f1:
()
The model is trained on the full development set.
The scores are computed on the full evaluation set.
()
             precision    recall  f1-score   support

          0       0.97      0.97      0.97      2227
          1       0.76      0.78      0.77       275

avg / total       0.95      0.95      0.95      2502

()
[[2158   69]
 [  61  214]]
>>>>>>> Round = 3
[INFO] START SMOTE algo with rate = 10 for 1208 samples
[INFO] DONE SMOTE algo, generate more 12080
# Tuning hyper-parameters for f1
()
Fitting 3 folds for each of 60 candidates, totalling 180 fits
Best parameters set found on development set of optimizing f1:
()
{'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
()
Grid scores on development set of optimizing f1:
()
0.984 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.987 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.989 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.988 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.984 (+/-0.004) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.981 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.985 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.987 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.987 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.991 (+/-0.000) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.990 (+/-0.000) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.990 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.986 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.989 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.991 (+/-0.000) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.989 (+/-0.000) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.990 (+/-0.000) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.993 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.993 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.989 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.993 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.993 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.993 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.993 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.993 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.993 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.993 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.993 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.993 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.993 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.991 (+/-0.000) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.993 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.993 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
()
Detailed classification report of optimizing f1:
()
The model is trained on the full development set.
The scores are computed on the full evaluation set.
()
             precision    recall  f1-score   support

          0       0.96      0.97      0.96      2172
          1       0.79      0.72      0.75       329

avg / total       0.94      0.94      0.94      2501

()
[[2107   65]
 [  91  238]]
>>>>>>> Round = 4
[INFO] START SMOTE algo with rate = 10 for 1236 samples
[INFO] DONE SMOTE algo, generate more 12360
# Tuning hyper-parameters for f1
()
Fitting 3 folds for each of 60 candidates, totalling 180 fits
Best parameters set found on development set of optimizing f1:
()
{'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
()
Grid scores on development set of optimizing f1:
()
0.984 (+/-0.000) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.986 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.988 (+/-0.000) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.987 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.989 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.991 (+/-0.000) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.983 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.991 (+/-0.000) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.982 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.985 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.987 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.987 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.989 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.989 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.986 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.988 (+/-0.000) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.989 (+/-0.000) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.990 (+/-0.000) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.989 (+/-0.000) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.991 (+/-0.000) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.992 (+/-0.000) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.991 (+/-0.000) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.992 (+/-0.000) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.991 (+/-0.000) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.991 (+/-0.000) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.992 (+/-0.000) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
()
Detailed classification report of optimizing f1:
()
The model is trained on the full development set.
The scores are computed on the full evaluation set.
()
             precision    recall  f1-score   support

          0       0.97      0.97      0.97      2200
          1       0.78      0.76      0.77       301

avg / total       0.94      0.94      0.94      2501

()
[[2134   66]
 [  73  228]]
>>>>>>> Round = 5
[INFO] START SMOTE algo with rate = 10 for 1221 samples
[INFO] DONE SMOTE algo, generate more 12210
# Tuning hyper-parameters for f1
()
Fitting 3 folds for each of 60 candidates, totalling 180 fits
Best parameters set found on development set of optimizing f1:
()
{'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
()
Grid scores on development set of optimizing f1:
()
0.985 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.986 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.989 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.987 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.989 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.978 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.982 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.985 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.988 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.987 (+/-0.000) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.990 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.989 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.991 (+/-0.000) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.986 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.989 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.989 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
()
Detailed classification report of optimizing f1:
()
The model is trained on the full development set.
The scores are computed on the full evaluation set.
()
             precision    recall  f1-score   support

          0       0.97      0.97      0.97      2185
          1       0.80      0.77      0.79       316

avg / total       0.95      0.95      0.95      2501

()
[[2125   60]
 [  73  243]]
