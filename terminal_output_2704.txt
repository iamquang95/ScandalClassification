>>>>>>> Round = 1
[INFO] START SMOTE algo with rate = 9 for 1233 samples
[INFO] DONE SMOTE algo, generate more 11097
# Tuning hyper-parameters for f1
()
Fitting 3 folds for each of 60 candidates, totalling 180 fits
Best parameters set found on development set of optimizing f1:
()
{'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
()
Grid scores on development set of optimizing f1:
()
0.982 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.985 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.988 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.985 (+/-0.000) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.988 (+/-0.000) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.977 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.988 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.991 (+/-0.000) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.980 (+/-0.004) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.984 (+/-0.004) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.987 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.986 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.989 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.988 (+/-0.000) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.988 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.991 (+/-0.000) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.000) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.985 (+/-0.003) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.988 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.988 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.989 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.991 (+/-0.000) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.990 (+/-0.000) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.991 (+/-0.000) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.000) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.988 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.989 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.992 (+/-0.000) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.991 (+/-0.000) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.000) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.989 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.991 (+/-0.000) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.991 (+/-0.000) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.991 (+/-0.000) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
()
Detailed classification report of optimizing f1:
()
The model is trained on the full development set.
The scores are computed on the full evaluation set.
()
             precision    recall  f1-score   support

          0       0.97      0.97      0.97      2198
          1       0.80      0.77      0.79       304

avg / total       0.95      0.95      0.95      2502

()
[[2141   57]
 [  70  234]]
>>>>>>> Round = 2
[INFO] START SMOTE algo with rate = 9 for 1198 samples
[INFO] DONE SMOTE algo, generate more 10782
# Tuning hyper-parameters for f1
()
Fitting 3 folds for each of 60 candidates, totalling 180 fits
Best parameters set found on development set of optimizing f1:
()
{'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
()
Grid scores on development set of optimizing f1:
()
0.982 (+/-0.004) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.985 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.987 (+/-0.004) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.985 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.988 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.990 (+/-0.004) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.975 (+/-0.004) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.989 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.990 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.980 (+/-0.004) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.984 (+/-0.004) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.986 (+/-0.004) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.986 (+/-0.004) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.989 (+/-0.003) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.990 (+/-0.003) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.988 (+/-0.003) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.990 (+/-0.003) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.988 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.991 (+/-0.004) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.985 (+/-0.004) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.988 (+/-0.003) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.990 (+/-0.003) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.989 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.990 (+/-0.004) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.990 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.990 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.988 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.990 (+/-0.004) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.990 (+/-0.003) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.990 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.990 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.990 (+/-0.003) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.990 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.990 (+/-0.003) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.991 (+/-0.003) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
()
Detailed classification report of optimizing f1:
()
The model is trained on the full development set.
The scores are computed on the full evaluation set.
()
             precision    recall  f1-score   support

          0       0.96      0.97      0.97      2163
          1       0.79      0.76      0.77       339

avg / total       0.94      0.94      0.94      2502

()
[[2093   70]
 [  81  258]]
>>>>>>> Round = 3
[INFO] START SMOTE algo with rate = 9 for 1242 samples
[INFO] DONE SMOTE algo, generate more 11178
# Tuning hyper-parameters for f1
()
Fitting 3 folds for each of 60 candidates, totalling 180 fits
Best parameters set found on development set of optimizing f1:
()
{'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
()
Grid scores on development set of optimizing f1:
()
0.981 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.984 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.986 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.984 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.987 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.990 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.974 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.988 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.990 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.978 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.983 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.985 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.985 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.988 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.987 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.989 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.987 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.984 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.987 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.990 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.988 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.989 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.987 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.992 (+/-0.003) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.989 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.992 (+/-0.003) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.990 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
()
Detailed classification report of optimizing f1:
()
The model is trained on the full development set.
The scores are computed on the full evaluation set.
()
             precision    recall  f1-score   support

          0       0.97      0.98      0.98      2206
          1       0.82      0.81      0.82       295

avg / total       0.96      0.96      0.96      2501

()
[[2155   51]
 [  57  238]]
>>>>>>> Round = 4
[INFO] START SMOTE algo with rate = 9 for 1237 samples
[INFO] DONE SMOTE algo, generate more 11133
# Tuning hyper-parameters for f1
()
Fitting 3 folds for each of 60 candidates, totalling 180 fits
Best parameters set found on development set of optimizing f1:
()
{'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
()
Grid scores on development set of optimizing f1:
()
0.983 (+/-0.004) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.986 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.988 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.985 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.989 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.977 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.989 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.980 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.984 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.987 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.986 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.989 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.988 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.989 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.985 (+/-0.003) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.989 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.989 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.992 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.988 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.992 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.990 (+/-0.001) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.991 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.992 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.991 (+/-0.001) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.992 (+/-0.002) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
()
Detailed classification report of optimizing f1:
()
The model is trained on the full development set.
The scores are computed on the full evaluation set.
()
             precision    recall  f1-score   support

          0       0.96      0.97      0.97      2201
          1       0.75      0.73      0.74       300

avg / total       0.94      0.94      0.94      2501

()
[[2128   73]
 [  80  220]]
>>>>>>> Round = 5
[INFO] START SMOTE algo with rate = 9 for 1238 samples
[INFO] DONE SMOTE algo, generate more 11142
# Tuning hyper-parameters for f1
()
Fitting 3 folds for each of 60 candidates, totalling 180 fits
Best parameters set found on development set of optimizing f1:
()
{'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
()
Grid scores on development set of optimizing f1:
()
0.983 (+/-0.004) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.985 (+/-0.004) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.987 (+/-0.005) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.986 (+/-0.004) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.988 (+/-0.004) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.990 (+/-0.004) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.983 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.989 (+/-0.004) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.991 (+/-0.004) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.980 (+/-0.004) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.984 (+/-0.005) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.986 (+/-0.005) for {'kernel': 'rbf', 'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.986 (+/-0.005) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.988 (+/-0.005) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.990 (+/-0.004) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.988 (+/-0.003) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.990 (+/-0.005) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.991 (+/-0.004) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.989 (+/-0.003) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.991 (+/-0.004) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.004) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.985 (+/-0.004) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.988 (+/-0.004) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.990 (+/-0.005) for {'kernel': 'rbf', 'C': 2, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.988 (+/-0.005) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.990 (+/-0.005) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.992 (+/-0.004) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.990 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.991 (+/-0.005) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.992 (+/-0.004) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.990 (+/-0.003) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.991 (+/-0.004) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.004) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.988 (+/-0.004) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.990 (+/-0.005) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.991 (+/-0.005) for {'kernel': 'rbf', 'C': 4, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.989 (+/-0.004) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.991 (+/-0.005) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.992 (+/-0.004) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.990 (+/-0.005) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.991 (+/-0.004) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.992 (+/-0.004) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.990 (+/-0.003) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.991 (+/-0.004) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.004) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.989 (+/-0.004) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.991 (+/-0.005) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.992 (+/-0.004) for {'kernel': 'rbf', 'C': 8, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
0.990 (+/-0.004) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 1}}
0.991 (+/-0.004) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 1}}
0.992 (+/-0.004) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 1}}
0.990 (+/-0.004) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 2}}
0.991 (+/-0.004) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 2}}
0.992 (+/-0.004) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 2}}
0.990 (+/-0.004) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': {1: 8}}
0.991 (+/-0.004) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': {1: 8}}
0.992 (+/-0.004) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': {1: 8}}
0.990 (+/-0.005) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.001953125, 'class_weight': 'balanced'}
0.992 (+/-0.004) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.00390625, 'class_weight': 'balanced'}
0.992 (+/-0.004) for {'kernel': 'rbf', 'C': 16, 'decision_function_shape': 'ovr', 'gamma': 0.0078125, 'class_weight': 'balanced'}
()
Detailed classification report of optimizing f1:
()
The model is trained on the full development set.
The scores are computed on the full evaluation set.
()
             precision    recall  f1-score   support

          0       0.96      0.97      0.97      2202
          1       0.79      0.74      0.76       299

avg / total       0.94      0.95      0.94      2501

()
[[2144   58]
 [  79  220]]
